type Query {
  meetups(filter: MeetupFilter, limit: Int = 10, offset: Int = 0): [Meetup!]!
  user(id: ID!): User!
}

type Mutation {
  register(input: RegisterInput): AuthResponse!
  createMeetup(newMeetup: NewMeetup!): Meetup!
  updateMeetup(id: ID!, input: UpdateMeetup!): Meetup!
  deleteMeetup(id: ID!): Boolean!
}

type User {
  id: ID!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  meetup: [Meetup!]!
  createdAt: Time!
  updatedAt: Time!
}

type Meetup {
  id: ID!
  name: String!
  description: String!
  user: User!
}

input NewMeetup {
  name: String!
  description: String!
}

input UpdateMeetup {
  name: String
  description: String
}

input MeetupFilter {
  name: String
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
  confirmPassword: String!
  firstName: String!
  lastName: String!
}

type AuthResponse {
  authToken: AuthToken!
  user: User!
}

type AuthToken {
  accessToken: String!
  expiredAt: Time!
}

scalar Time